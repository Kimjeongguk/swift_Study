// Generated by Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
#ifndef IXMOBILESDK_SWIFT_H
#define IXMOBILESDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="IxMobileSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

typedef SWIFT_ENUM(NSInteger, ACC_LANG_TYPE, open) {
  ACC_LANG_TYPEKACC_LANG_ENG = 0,
  ACC_LANG_TYPEKACC_LANG_KOR = 1,
};

typedef SWIFT_ENUM(NSInteger, CHECKRULE, open) {
  CHECKRULENONE = 0x0000,
  CHECKRULEALLOW_NUMBER = 0x0001,
  CHECKRULEALLOW_ALPHABET = 0x0002,
  CHECKRULEALLOW_SPECIAL = 0x0004,
  CHECKRULEPOLICY_DUPLICATED_2CHAR = 0x0008,
  CHECKRULEPOLICY_DUPLICATED_3CHAR = 0x0010,
  CHECKRULEPOLICY_CONTINUOUS_3CHAR = 0x0020,
  CHECKRULEPOLICY_CONTINUOUS_4CHAR = 0x0040,
  CHECKRULEHAS_NUMBER = 0x0080,
  CHECKRULEHAS_ALPHABET = 0x0100,
  CHECKRULEHAS_ALPHABET_LOW = 0x0200,
  CHECKRULEHAS_ALPHABET_UPPER = 0x0400,
  CHECKRULEHAS_SPECIAL = 0x0800,
};

typedef SWIFT_ENUM(NSInteger, COLLECT_COMMAND, open) {
  COLLECT_COMMANDKCMD_GET_UUID = 0x300,
  COLLECT_COMMANDKCMD_GET_OS_VERSION = 769,
  COLLECT_COMMANDKCMD_GET_DEVICE_MODEL = 770,
  COLLECT_COMMANDKCMD_GET_CARRIER_NAME = 771,
  COLLECT_COMMANDKCMD_GET_MCC = 772,
  COLLECT_COMMANDKCMD_GET_MNC = 773,
  COLLECT_COMMANDKCMD_GET_CALL_STATE = 774,
  COLLECT_COMMANDKCMD_GET_NETWORK_INFO = 775,
  COLLECT_COMMANDKCMD_GET_MAC_ADDRESS = 776,
  COLLECT_COMMANDKCMD_GET_IS_JAILBROKEN = 777,
  COLLECT_COMMANDKCMD_GET_SOFTWARE_INFO = 778,
};

typedef SWIFT_ENUM(NSInteger, FORMAT_TYPE, open) {
  FORMAT_TYPETSTRING = 0,
  FORMAT_TYPETJSON = 1,
};

typedef SWIFT_ENUM(NSInteger, FUNC_KEY, open) {
  FUNC_KEYNone = 0,
  FUNC_KEYDone = 1,
  FUNC_KEYCancel = 2,
  FUNC_KEYHide = 3,
  FUNC_KEYDelete = 4,
  FUNC_KEYRemap = 5,
  FUNC_KEYShift = 6,
  FUNC_KEYMode = 7,
  FUNC_KEYSpace = 8,
};

@class UITextField;
enum KEYPAD_TYPE : NSInteger;
enum SHUFFLE_TYPE : NSInteger;
@class NSString;
@class IxConfigureKeypad;
@class IxKeypadColors;

SWIFT_CLASS("_TtC11IxMobileSDK20IxConfigureInputItem")
@interface IxConfigureInputItem : NSObject <NSCopying>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithTextInput:(UITextField * _Nonnull)textInput inputType:(enum KEYPAD_TYPE)inputType OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithTextInput:(UITextField * _Nonnull)textInput inputType:(enum KEYPAD_TYPE)inputType shuffleType:(enum SHUFFLE_TYPE)shuffleType OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithInputType:(enum KEYPAD_TYPE)inputType shuffleType:(enum SHUFFLE_TYPE)shuffleType OBJC_DESIGNATED_INITIALIZER;
- (void)setMinLengthWithMin:(NSInteger)min;
- (void)setMaxLengthWithMax:(NSInteger)max;
- (void)setInputPolicyWithPolicy:(NSInteger)policy;
- (void)setMixedPatternWithPattern:(NSString * _Nonnull)pattern;
- (void)setPrefixNameWithPrefix:(NSString * _Nonnull)prefix;
- (void)setConfigureKeypadWithConfigKeypad:(IxConfigureKeypad * _Nonnull)configKeypad;
- (void)setKeyBgColorWithBgColor:(IxKeypadColors * _Nonnull)bgColor;
- (void)setKeyPadBgColorWithPadBgColor:(NSString * _Nonnull)padBgColor;
- (void)setKeyBgDarkColorWithColor:(IxKeypadColors * _Nonnull)color;
- (void)setKeyPadBgDarkColorWithColor:(NSString * _Nonnull)color;
- (void)setShowAnimationWithTimeInterval:(CGFloat)timeInterval repeat:(CGFloat)repeatValue;
- (void)setHideAnimationWithTimeInterval:(CGFloat)timeInterval repeat:(CGFloat)repeatValue;
- (void)setQwertyAccKeyCodeWithUpperCase:(NSArray<NSArray<NSString *> *> * _Nonnull)upperCase lowerCase:(NSArray<NSArray<NSString *> *> * _Nonnull)lowerCase special:(NSArray<NSArray<NSString *> *> * _Nonnull)special langType:(enum ACC_LANG_TYPE)langType;
- (void)setNumberAccKeyCodeWithNumberCase:(NSArray<NSArray<NSString *> *> * _Nonnull)numberCase langType:(enum ACC_LANG_TYPE)langType;
- (void)setEnableSecureAccesibilityWithEnable:(BOOL)enable;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (void)enableGapResourcesWithGapImg:(BOOL)gapImg background:(BOOL)background;
@end


SWIFT_CLASS("_TtC11IxMobileSDK17IxConfigureKeypad")
@interface IxConfigureKeypad : NSObject
- (nonnull instancetype)initWithType:(enum KEYPAD_TYPE)type OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithType:(enum KEYPAD_TYPE)type keySet:(NSArray<NSArray *> * _Nonnull)keySet OBJC_DESIGNATED_INITIALIZER;
- (void)setKeypadFuncKeysWithKeySet:(NSArray<NSArray *> * _Nonnull)keySet;
- (BOOL)setKeypadFuncKeysWithKeys:(NSArray<NSNumber *> * _Nonnull)keys weights:(NSArray<NSNumber *> * _Nonnull)weights SWIFT_WARN_UNUSED_RESULT;
- (void)setQwertyKeypadShiftDelFuncKeysWithKeySet:(NSArray<NSArray *> * _Nonnull)keySet;
- (BOOL)setQwertyKeypadShiftDelFuncKeysWithKeys:(NSArray<NSNumber *> * _Nonnull)keys weights:(NSArray<NSNumber *> * _Nonnull)weights SWIFT_WARN_UNUSED_RESULT;
- (void)setKeypadMarginWithTop:(CGFloat)top left:(CGFloat)left bottom:(CGFloat)bottom right:(CGFloat)right;
- (void)setKeyMarginWithWidth:(CGFloat)width height:(CGFloat)height;
- (void)setKeyRateWithWidth:(CGFloat)width height:(CGFloat)height;
- (void)setQwertyKeypadFuncKeyImgWithRemap:(NSString * _Nonnull)remap remap_push:(NSString * _Nonnull)remap_push toggle_txt:(NSString * _Nonnull)toggle_txt toggle_txt_push:(NSString * _Nonnull)toggle_txt_push toggle_special:(NSString * _Nonnull)toggle_special toggle_special_push:(NSString * _Nonnull)toggle_special_push space:(NSString * _Nonnull)space space_push:(NSString * _Nonnull)space_push done:(NSString * _Nonnull)done done_push:(NSString * _Nonnull)done_push cancel:(NSString * _Nonnull)cancel cancel_push:(NSString * _Nonnull)cancel_push hide:(NSString * _Nonnull)hide hide_push:(NSString * _Nonnull)hide_push;
- (void)setQwertyKeypadShiftDelImgWithShift_normal:(NSString * _Nonnull)shift_normal shift_normal_push:(NSString * _Nonnull)shift_normal_push shift_capital:(NSString * _Nonnull)shift_capital shift_capital_push:(NSString * _Nonnull)shift_capital_push delete:(NSString * _Nonnull)delete_ delete_push:(NSString * _Nonnull)delete_push;
- (void)setNumberKeypadFuncKeyImgWithType:(enum SHUFFLE_TYPE)type remap:(NSString * _Nonnull)remap remap_push:(NSString * _Nonnull)remap_push delete:(NSString * _Nonnull)delete_ delete_push:(NSString * _Nonnull)delete_push done:(NSString * _Nonnull)done done_push:(NSString * _Nonnull)done_push cancel:(NSString * _Nonnull)cancel cancel_push:(NSString * _Nonnull)cancel_push none:(NSString * _Nonnull)none;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC11IxMobileSDK14IxKeypadColors")
@interface IxKeypadColors : NSObject
@property (nonatomic, copy) NSString * _Nullable numPadNumKey;
@property (nonatomic, copy) NSString * _Nullable numPadFuncKey;
@property (nonatomic, copy) NSString * _Nullable numPadNumKeyPush;
@property (nonatomic, copy) NSString * _Nullable numPadFuncKeyPush;
@property (nonatomic, copy) NSString * _Nullable qwertyPadNumKey;
@property (nonatomic, copy) NSString * _Nullable qwertyPadEngKey;
@property (nonatomic, copy) NSString * _Nullable qwertyPadFuncKey;
@property (nonatomic, copy) NSString * _Nullable qwertyPadNumKeyPush;
@property (nonatomic, copy) NSString * _Nullable qwertyPadEngKeyPush;
@property (nonatomic, copy) NSString * _Nullable qwertyPadFuncKeyPush;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIViewController;
@class IxResultItem;
@protocol KeypadEventListener;
@class UIView;
enum VIBRATION : NSInteger;

SWIFT_CLASS("_TtC11IxMobileSDK20IxKeypadManageHelper")
@interface IxKeypadManageHelper : NSObject
- (NSString * _Nonnull)getMajorVersion SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)getVersion SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getVersionString SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithViewController:(UIViewController * _Nonnull)viewController;
- (void)configureInputBoxWithConfig:(IxConfigureInputItem * _Nonnull)config;
- (void)configurationInputBoxsWithConfigs:(NSArray<IxConfigureInputItem *> * _Nonnull)configs;
- (void)configureInputBoxAndStartWithInputBox:(UITextField * _Nonnull)inputBox config:(IxConfigureInputItem * _Nonnull)config;
- (void)startSecureKeypadWithConfig:(IxConfigureInputItem * _Nonnull)config;
- (void)startSecureKeypadWithInputBox:(UITextField * _Nonnull)inputBox;
- (BOOL)setServerKeyWithServerKey:(NSString * _Nonnull)serverKey error:(NSError * _Nullable * _Nullable)error;
- (NSArray<IxResultItem *> * _Nullable)getInputResults SWIFT_WARN_UNUSED_RESULT;
- (void)onEnterNormalInputBoxWithInputBox:(UITextField * _Nonnull)inputBox;
- (NSInteger)getFocusedInputBoxIndex SWIFT_WARN_UNUSED_RESULT;
- (void)finish;
- (void)setKeypadEventListenerWithDelegate:(id <KeypadEventListener> _Nonnull)delegate;
/// 서버키로 재암호화
- (IxResultItem * _Nullable)repackResultWithServerKeyWithInputBox:(UITextField * _Nonnull)inputBox serverKey:(NSString * _Nonnull)serverKey SWIFT_WARN_UNUSED_RESULT;
/// 서버키로 재암호화
- (NSArray<IxResultItem *> * _Nullable)repackResultWithServerKeyWithServerKey:(NSString * _Nonnull)serverKey SWIFT_WARN_UNUSED_RESULT;
/// 서버키로 평문 암호화
- (IxResultItem * _Nullable)repackResultWithServerKeyWithPlainText:(NSString * _Nonnull)plainText serverKey:(NSString * _Nonnull)serverKey SWIFT_WARN_UNUSED_RESULT;
/// TextField 목록에서 이전 TextField로 포커스 이동
/// 만약 목록의 처음 TextField 일 경우 마지막 TextField를 반환
- (UITextField * _Nullable)moveToPrevInputBox SWIFT_WARN_UNUSED_RESULT;
/// TextField 목록에서 다음 TextField로 포커스 이동
/// 만약 목록의 마지막 TextField 일 경우 목록의 처음 TextField를 반환
- (UITextField * _Nullable)moveToNextInputBox SWIFT_WARN_UNUSED_RESULT;
- (void)setExtraToolbarWithToolbar:(UIView * _Nonnull)toolbar;
- (NSArray<NSNumber *> * _Nullable)getRealTextWithInputBox:(UITextField * _Nonnull)inputBox SWIFT_WARN_UNUSED_RESULT;
- (BOOL)checkInputTypePolicyWithInputBox:(UITextField * _Nonnull)inputBox SWIFT_WARN_UNUSED_RESULT;
- (void)setVibrationModeWithMode:(enum VIBRATION)mode;
- (void)clearInputResultWithIndex:(NSInteger)index;
- (void)setAutoFocusMoveWithEnable:(BOOL)enable;
- (void)setAutoHiddenWithEnable:(BOOL)enable;
- (void)setEnterFocusMoveWithEnable:(BOOL)enable;
- (void)setShiftLockWithEnable:(BOOL)enable;
- (void)setNormalTextFieldWithTextFields:(NSArray<UITextField *> * _Nonnull)textFields;
- (void)setIndicatorWithEnable:(BOOL)enable;
- (void)setViewControllerWithViewController:(UIViewController * _Nonnull)viewController;
- (void)setDefaultConfigWithConfigs:(NSArray<IxConfigureInputItem *> * _Nonnull)configs;
- (void)setSecureTextFieldWithPrefix:(NSString * _Nonnull)prefix textFields:(NSArray<UITextField *> * _Nonnull)textFields;
- (void)setSecureTextFieldOptionsForObjcWithTextField:(UITextField * _Nonnull)textField min:(NSInteger)min max:(NSInteger)max pattern:(NSString * _Nonnull)pattern policy:(NSInteger)policy;
- (void)deInitialize;
- (UITextField * _Nonnull)createHiddenTextField SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC11IxMobileSDK12IxResultItem")
@interface IxResultItem : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEmpty SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getKey SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getEncData SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)getLength SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSNumber *> * _Nullable)getMasterKey SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC11IxMobileSDK15IxSecuLogMaster")
@interface IxSecuLogMaster : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)setCheckAppWithPackageName:(NSString * _Nullable)appPackageName;
- (BOOL)setServerKey:(NSString * _Nonnull)serverKey SWIFT_WARN_UNUSED_RESULT;
- (void)enableNatIpWithEnable:(BOOL)enable;
- (void)enableVpnInfoWithEnable:(BOOL)enable;
/// @brief Log 데이터 구하기
/// @param nLogIndex Log 데이터 인덱스
/// @return Log 데이터 (문자열)
- (NSString * _Nullable)getLogDataWithNLogIndex:(enum COLLECT_COMMAND)nLogIndex SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getLogDataForObjcWithCommand:(NSInteger)command SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, NSString *> * _Nonnull)getAllLogs SWIFT_WARN_UNUSED_RESULT;
- (void)probeDeviceInfo;
- (NSString * _Nullable)getBuiltKey SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getEveryLog SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getEveryLogWithformatWithFormatType:(enum FORMAT_TYPE)formatType SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getEveryLogByString SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, NSString *> * _Nonnull)getEveryLogByDictionary SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getVersionString SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC11IxMobileSDK15IxSecureManager")
@interface IxSecureManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (BOOL)initLicenseWithLicenseKey:(NSString * _Nonnull)licenseKey customerID:(NSString * _Nonnull)customerID SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, KEYPAD_TYPE, open) {
  KEYPAD_TYPEKEYPAD_TYPE_QWERTY = 0,
  KEYPAD_TYPEKEYPAD_TYPE_NUMBER = 1,
};

enum RESULT : NSInteger;

SWIFT_PROTOCOL("_TtP11IxMobileSDK19KeypadEventListener_")
@protocol KeypadEventListener
- (void)onChangeInputBoxWithInputBox:(UITextField * _Nonnull)inputBox;
- (void)onInputViolationOccurredWithErrorCode:(enum CHECKRULE)errorCode;
- (void)onInputChangedWithInputBox:(UITextField * _Nonnull)inputBox count:(NSInteger)count;
- (void)onInitializingWithIsOnLoading:(BOOL)isOnLoading;
- (void)onKeypadCreate;
- (void)onKeypadFinish;
- (void)onKeypadFinishWithResultCode:(enum RESULT)resultCode;
@end

typedef SWIFT_ENUM(NSInteger, RESULT, open) {
  RESULTNONE = 0,
  RESULTOK = 1,
  RESULTCANCEL = 2,
};

typedef SWIFT_ENUM(NSInteger, SHUFFLE_TYPE, open) {
  SHUFFLE_TYPESHUFFLE_TYPE_EXTEND = 0,
  SHUFFLE_TYPESHUFFLE_TYPE_GAPKEY = 1,
  SHUFFLE_TYPESHUFFLE_TYPE_MARGIN = 2,
};

typedef SWIFT_ENUM(NSInteger, VIBRATION, open) {
  VIBRATIONNone = 0,
  VIBRATIONMode_default = 1,
  VIBRATIONMode_haptic = 2,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif
